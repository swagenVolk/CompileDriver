int8 value;

// This expression uses parentheses to force the precedence & ordering
// of operations to use 4 distinct scope levels
value = 1 + 2 * ((3 + 4) * (5 + 6));


^^^^^^^^^^ Contents of illustrate_literals3.c included above for reference ^^^^^^^^^^

/* *************** <COMPILATION STAGE> **************** */
// ILLUSTRATIVE MODE: Starting compilation of expression that begins on illustrate_literals3.c:5:1

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 2: [3][B+][4]
Scope Level 1: [(]
Scope Level 0: [value][=][1][B+][2][*][(]
Left & right operands moved under (like tree branches) [B+] operator (Addition)
Scope Level 2: /B+\

Parse tree of moved operator 
               /B+\
            [3]    [4]

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 2: [5][B+][6]
Scope Level 1: /B+\[*][(]
Scope Level 0: [value][=][1][B+][2][*][(]
Left & right operands moved under (like tree branches) [B+] operator (Addition)
Scope Level 2: /B+\

Parse tree of moved operator 
               /B+\
            [5]    [6]

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 1: /B+\[*]/B+\
Scope Level 0: [value][=][1][B+][2][*][(]
Left & right operands moved under (like tree branches) [*] operator (Multiply)
Scope Level 1: /*\

Parse tree of moved operator 
               /*\
           /B+\   /B+\
         [3][4]   [5][6]

Current highest precedence sub-expression closed; compiler has read in all Tokens for this expression.
Scope Level 0: [value][=][1][B+][2][*]/*\
Left & right operands moved under (like tree branches) [*] operator (Multiply)
Scope Level 0: [value][=][1][B+]/*\

Parse tree of moved operator 
                                /*\
                             [2]   /*\
                                   /B+\/B+\
                                   [3][4][5][6]

Left & right operands moved under (like tree branches) [B+] operator (Addition)
Scope Level 0: [value][=]/B+\

Parse tree of moved operator 
                         /B+\
                      [1]    /*\
                             [2]/*\
                             /B+\/B+\
                             [3][4][5][6]

Compiler's Parse Tree for Complete Expression
       /=\
[value]   /B+\
          [1]/*\
          [2]/*\
             /B+\/B+\
             [3][4][5][6]

Compiler ret_code = 0

/* *************** </COMPILATION STAGE> *************** */

/* *************** <INTERPRETER STAGE> **************** */
// ILLUSTRATIVE MODE: Interpreter will resolve expression 
[=][value][B+][1][*][2][*][B+][3][4][B+][5][6]
                           ^ takes next 2 operands (Addition)
[=][value][B+][1][*][2][*][7][B+][5][6]
                              ^ takes next 2 operands (Addition)
[=][value][B+][1][*][2][*][7][11]
                        ^ takes next 2 operands (Multiply)
[=][value][B+][1][*][2][77]
                  ^ takes next 2 operands (Multiply)
[=][value][B+][1][154]
           ^ takes next 2 operands (Addition)
[=][value][155]
 ^ takes next 2 operands (Assignment)
[155] expression resolved
Interpreter ret_code = 0

INTERNAL ERROR MESSAGES: Unique messages = 0; Total messages = 0;

USER ERROR MESSAGES: Unique messages = 0; Total messages = 0;

USER WARNING MESSAGES: Unique messages = 0; Total messages = 0;

USER INFO MESSAGES: Unique messages = 0; Total messages = 0;

/* ********** <SHOW VARIABLES & VALUES> ********** */
// ********** <SCOPE LEVEL 0> ********** 
// Scope opened by: INTERNAL_USE_TKN(U)->[__ROOT_SCOPE] on line 0 column 0
value = 155;
// ********** </SCOPE LEVEL 0> ********** 
/* ********** </SHOW VARIABLES & VALUES> ********** */
/* *************** </INTERPRETER STAGE> *************** */
