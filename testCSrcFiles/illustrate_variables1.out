// To keep the level of illustrative output reasonable, expressions inside variable declarations (ie on line below) are not logged
int16 one = 1, two = one + one, three = two + one, four = three + one, five = three + two, six = three * two;

int32 result;

// The expression below will have illustrative logging.
result = one + two * three * four / six;


^^^^^^^^^^ Contents of illustrate_variables1.c included above for reference ^^^^^^^^^^

/* *************** <COMPILATION STAGE> **************** */
// ILLUSTRATIVE MODE: Starting compilation of expression that begins on illustrate_variables1.c:7:1

Current highest precedence sub-expression closed; compiler has read in all Tokens for this expression.
Scope Level 0: [result][=][one][B+][two][*][three][*][four][/][six]
Left & right operands moved under (like tree branches) [*] operator (Multiply)
Scope Level 0: [result][=][one][B+]/*\[*][four][/][six]

Parse tree of moved operator 
                                   /*\
                              [two]   [three]

Left & right operands moved under (like tree branches) [*] operator (Multiply)
Scope Level 0: [result][=][one][B+]/*\[/][six]

Parse tree of moved operator 
                                   /*\
                                /*\   [four]
                       [two][three]

Left & right operands moved under (like tree branches) [/] operator (Divide)
Scope Level 0: [result][=][one][B+]//\

Parse tree of moved operator 
                                   //\
                                /*\   [six]
                          /*\[four]
                 [two][three]      

Left & right operands moved under (like tree branches) [B+] operator (Addition)
Scope Level 0: [result][=]/B+\

Parse tree of moved operator 
                          /B+\
                     [one]    //\
                              /*\[six]
                              /*\[four]
                              [two][three]

Compiler's Parse Tree for Complete Expression
        /=\
[result]   /B+\
           [one]//\
             /*\[six]
             /*\[four]
             [two][three]

Compiler ret_code = 0

/* *************** </COMPILATION STAGE> *************** */

/* *************** <INTERPRETER STAGE> **************** */
// ILLUSTRATIVE MODE: Interpreter will resolve expression 
[=][result][B+][one][/][*][*][two][three][four][six]
                           ^ takes next 2 operands (Multiply)
[=][result][B+][one][/][*][6][four][six]
                        ^ takes next 2 operands (Multiply)
[=][result][B+][one][/][24][six]
                     ^ takes next 2 operands (Divide)
[=][result][B+][one][4]
            ^ takes next 2 operands (Addition)
[=][result][5]
 ^ takes next 2 operands (Assignment)
[5] expression resolved
Interpreter ret_code = 0

INTERNAL ERROR MESSAGES: Unique messages = 0; Total messages = 0;

USER ERROR MESSAGES: Unique messages = 0; Total messages = 0;

USER WARNING MESSAGES: Unique messages = 0; Total messages = 0;

USER INFO MESSAGES: Unique messages = 0; Total messages = 0;

/* ********** <SHOW VARIABLES & VALUES> ********** */
// ********** <SCOPE LEVEL 0> ********** 
// Scope opened by: INTERNAL_USE_TKN(U)->[__ROOT_SCOPE] on line 0 column 0
five   = 5;
four   = 4;
one    = 1;
result = 5;
six    = 6;
three  = 3;
two    = 2;
// ********** </SCOPE LEVEL 0> ********** 
/* ********** </SHOW VARIABLES & VALUES> ********** */
/* *************** </INTERPRETER STAGE> *************** */
