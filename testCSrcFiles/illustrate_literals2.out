int8 expect_71;

// This expression uses parentheses to force the precedence & ordering
// of operations to 3 scope levels
expect_71 = 1 + 2 * ((3 + 4) * 5);


^^^^^^^^^^ Contents of illustrate_literals2.c included above for reference ^^^^^^^^^^

/* *************** <COMPILATION STAGE> **************** */
// ILLUSTRATIVE MODE: Starting compilation of expression that begins on illustrate_literals2.c:5:1

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 2: [3][B+][4]
Scope Level 1: ['(']
Scope Level 0: [expect_71][=][1][B+][2][*]['(']
Left & right operands moved under (like tree branches) [B+] operator (Add)
Scope Level 2: /B+\

Parse tree of moved operator 
               /B+\
            [3]   [4]

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 1: /B+\[*][5]
Scope Level 0: [expect_71][=][1][B+][2][*]['(']
Left & right operands moved under (like tree branches) [*] operator (Multiply)
Scope Level 1: /*\

Parse tree of moved operator 
               /*\
           /B+\   [5]
         [3][4]

Current highest precedence sub-expression closed; compiler has read in all Tokens for this expression.
Scope Level 0: [expect_71][=][1][B+][2][*]/*\
Left & right operands moved under (like tree branches) [*] operator (Multiply)
Scope Level 0: [expect_71][=][1][B+]/*\

Parse tree of moved operator 
                                    /*\
                                 [2]   /*\
                                       /B+\  [5]
                                       [3][4]

Left & right operands moved under (like tree branches) [B+] operator (Add)
Scope Level 0: [expect_71][=]/B+\

Parse tree of moved operator 
                             /B+\
                          [1]   /*\
                                [2] /*\
                                    /B+\  [5]
                                    [3][4]

Compiler's Parse Tree for Complete Expression
           /=\
[expect_71]   /B+\
           [1]   /*\
                 [2] /*\
                     /B+\  [5]
                     [3][4]

Parse tree flattened and written out to interpreted file
[=][expect_71][B+][1][*][2][*][B+][3][4][5]

Compiler ret_code = 0

/* *************** </COMPILATION STAGE> *************** */

/* *************** <INTERPRETER STAGE> **************** */
// ILLUSTRATIVE MODE: Flattened expression resolved below

[=][expect_71][B+][1][*][2][*][B+][3][4][5]
                               ^ Add next 2 sequential operand(s); replace w/ result
[=][expect_71][B+][1][*][2][*][7][5]
                            ^ Multiply next 2 sequential operand(s); replace w/ result
[=][expect_71][B+][1][*][2][35]
                      ^ Multiply next 2 sequential operand(s); replace w/ result
[=][expect_71][B+][1][70]
               ^ Add next 2 sequential operand(s); replace w/ result
[=][expect_71][71]
 ^ Assign next 2 sequential operand(s); replace w/ result
[71] expression resolved
Interpreter ret_code = 0

/* ********** <SHOW VARIABLES & VALUES> ********** */
// ********** <SCOPE LEVEL 0> ********** 
// Scope opened by: INTERNAL_USE_TKN(U)->[__ROOT_SCOPE] on line 0 column 0
expect_71 = 71;
// ********** </SCOPE LEVEL 0> ********** 
/* ********** </SHOW VARIABLES & VALUES> ********** */
/* *************** </INTERPRETER STAGE> *************** */
