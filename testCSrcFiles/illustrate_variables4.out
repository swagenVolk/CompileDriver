// To keep the level of illustrative output reasonable, expressions inside variable declarations (ie on line below) are not logged
int16 one = 1, two = one + one, three = two + one, four = three + one, five = three + two, six = three * two, seven = four + three, eight = four * two, nine = three * three;

int32 result;

// The expression below will have illustrative logging.
result = ((one + two) + three) * (four + six) + (six * one << five <  eight * four ? three : four);
//           (3 + 3) * 10 + four


^^^^^^^^^^ Contents of illustrate_variables4.c included above for reference ^^^^^^^^^^

/* *************** <COMPILATION STAGE> **************** */
// ILLUSTRATIVE MODE: Starting compilation of expression that begins on illustrate_variables4.c:7:1

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 2: [one][B+][two]
Scope Level 1: [(]
Scope Level 0: [result][=][(]
Left & right operands moved under (like tree branches) [B+] operator (Addition)
Scope Level 2: /B+\

Parse tree of moved operator 
               /B+\
          [one]    [two]

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 1: /B+\[B+][three]
Scope Level 0: [result][=][(]
Left & right operands moved under (like tree branches) [B+] operator (Addition)
Scope Level 1: /B+\

Parse tree of moved operator 
               /B+\
           /B+\    [three]
     [one][two]

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 1: [four][B+][six]
Scope Level 0: [result][=]/B+\[*][(]
Left & right operands moved under (like tree branches) [B+] operator (Addition)
Scope Level 1: /B+\

Parse tree of moved operator 
               /B+\
         [four]    [six]

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 2: [three][:][four]
Scope Level 1: [six][*][one][<<][five][<][eight][*][four][?]
Scope Level 0: [result][=]/B+\[*]/B+\[B+][(]
Left & right operands moved under (like tree branches) [:] operator (Ternary (divs TRUE|FALSE paths))
Scope Level 2: /:\

Parse tree of moved operator 
               /:\
        [three]   [four]

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 1: [six][*][one][<<][five][<][eight][*][four][?\
Scope Level 0: [result][=]/B+\[*]/B+\[B+][(]
Left & right operands moved under (like tree branches) [*] operator (Multiply)
Scope Level 1: /*\[<<][five][<][eight][*][four][?\

Parse tree of moved operator 
               /*\
          [six]   [one]

Left & right operands moved under (like tree branches) [*] operator (Multiply)
Scope Level 1: /*\[<<][five][<]/*\[?\

Parse tree of moved operator 
                               /*\
                        [eight]   [four]

Left & right operands moved under (like tree branches) [<<] operator (Left shift)
Scope Level 1: /<<\[<]/*\[?\

Parse tree of moved operator 
               /<<\
            /*\    [five]
     [six][one]

Left & right operands moved under (like tree branches) [<] operator
Scope Level 1: /<\[?\

Parse tree of moved operator 
                /<\
            /<<\   /*\
       /*\[five]   [eight][four]
[six][one]      

Left operand moved under (like tree branches) [?] operator (Ternary (if-else))
Scope Level 1: /?\

Parse tree of moved operator 

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 0: [result][=]/B+\[*]/B+\[B+]/?\
Left & right operands moved under (like tree branches) [*] operator (Multiply)
Scope Level 0: [result][=]/*\[B+]/?\

Parse tree of moved operator 
                          /*\
                      /B+\   /B+\
               /B+\[three]   [four][six]
         [one][two]       

Left & right operands moved under (like tree branches) [B+] operator (Addition)
Scope Level 0: [result][=]/B+\

Parse tree of moved operator 

Compiler's Parse Tree for Complete Expression

Compiler ret_code = 0

/* *************** </COMPILATION STAGE> *************** */

/* *************** <INTERPRETER STAGE> **************** */
// ILLUSTRATIVE MODE: Interpreter will resolve expression 
[=][result][B+][*][B+][B+][one][two][three][B+][four][six][?][<][<<][*][six][one][five][*][eight][four][three][four]
                       ^ takes next 2 operands (Addition)
[=][result][B+][*][B+][3][three][B+][four][six][?][<][<<][*][six][one][five][*][eight][four][three][four]
                   ^ takes next 2 operands (Addition)
[=][result][B+][*][6][B+][four][six][?][<][<<][*][six][one][five][*][eight][four][three][four]
                      ^ takes next 2 operands (Addition)
[=][result][B+][*][6][10][?][<][<<][*][six][one][five][*][eight][four][three][four]
                ^ takes next 2 operands (Multiply)
[=][result][B+][60][?][<][<<][*][six][one][five][*][eight][four][three][four]
                              ^ takes next 2 operands (Multiply)
[=][result][B+][60][?][<][<<][6][five][*][eight][four][three][four]
                          ^ takes next 2 operands (Left shift)
[=][result][B+][60][?][<][0xc0][*][eight][four][three][four]
                                ^ takes next 2 operands (Multiply)
[=][result][B+][60][?][<][0xc0][32][three][four]
                       ^ takes next 2 operands
[=][result][B+][60][?][0x0][three][four]
                    ^ takes next 3 operands; [Conditional][TRUE path][FALSE path] (Ternary (if-else))
[=][result][B+][60][four]
            ^ takes next 2 operands (Addition)
[=][result][64]
 ^ takes next 2 operands (Assignment)
[64] expression resolved
Interpreter ret_code = 0

INTERNAL ERROR MESSAGES: Unique messages = 0; Total messages = 0;

USER ERROR MESSAGES: Unique messages = 0; Total messages = 0;

USER WARNING MESSAGES: Unique messages = 0; Total messages = 0;

USER INFO MESSAGES: Unique messages = 0; Total messages = 0;

/* ********** <SHOW VARIABLES & VALUES> ********** */
// ********** <SCOPE LEVEL 0> ********** 
// Scope opened by: INTERNAL_USE_TKN(U)->[__ROOT_SCOPE] on line 0 column 0
eight  = 8;
five   = 5;
four   = 4;
nine   = 9;
one    = 1;
result = 64;
seven  = 7;
six    = 6;
three  = 3;
two    = 2;
// ********** </SCOPE LEVEL 0> ********** 
/* ********** </SHOW VARIABLES & VALUES> ********** */
/* *************** </INTERPRETER STAGE> *************** */
