// To keep the level of illustrative output reasonable, expressions inside variable declarations (ie on line below) are not logged
int16 one = 1, two = one + one, three = two + one, four = three + one, five = three + two, six = three * two, seven = four + three, eight = four * two, nine = three * three;

int32 expect_6;

// The expression below will have illustrative logging.
expect_6 = (one + two) * three * four / six;


^^^^^^^^^^ Contents of illustrate_variables2.c included above for reference ^^^^^^^^^^

/* *************** <COMPILATION STAGE> **************** */
// ILLUSTRATIVE MODE: Starting compilation of expression that begins on illustrate_variables2.c:7:1

Current highest precedence sub-expression closed; compiler has NOT read in all Tokens for this expression.
Scope Level 1: [one][B+][two]
Scope Level 0: [expect_6][=]['(']
Left & right operands moved under (like tree branches) [B+] operator (Add)
Scope Level 1: /B+\

Parse tree of moved operator 
               /B+\
          [one]   [two]

Current highest precedence sub-expression closed; compiler has read in all Tokens for this expression.
Scope Level 0: [expect_6][=]/B+\[*][three][*][four][/][six]
Left & right operands moved under (like tree branches) [*] operator (Multiply)
Scope Level 0: [expect_6][=]/*\[*][four][/][six]

Parse tree of moved operator 
                            /*\
                        /B+\   [three]
                  [one][two]

Left & right operands moved under (like tree branches) [*] operator (Multiply)
Scope Level 0: [expect_6][=]/*\[/][six]

Parse tree of moved operator 
                            /*\
                         /*\   [four]
                /B+\ [three]
          [one][two]        

Left & right operands moved under (like tree branches) [/] operator (Divide)
Scope Level 0: [expect_6][=]//\

Parse tree of moved operator 
                            //\
                         /*\   [six]
                  /*\ [four]
         /B+\ [three]       
   [one][two]               

Compiler's Parse Tree for Complete Expression
                       /=\
             [expect_6]   //\
                       /*\   [six]
                /*\ [four]
       /B+\ [three]       
 [one][two]               

Parse tree flattened and written out to interpreted file
[=][expect_6][/][*][*][B+][one][two][three][four][six]

Compiler ret_code = 0

/* *************** </COMPILATION STAGE> *************** */

/* *************** <INTERPRETER STAGE> **************** */
// ILLUSTRATIVE MODE: Flattened expression resolved below

[=][expect_6][/][*][*][B+][one][two][three][four][six]
                       ^ Add next 2 sequential operand(s); replace w/ result
[=][expect_6][/][*][*][3][three][four][six]
                    ^ Multiply next 2 sequential operand(s); replace w/ result
[=][expect_6][/][*][9][four][six]
                 ^ Multiply next 2 sequential operand(s); replace w/ result
[=][expect_6][/][36][six]
              ^ Divide next 2 sequential operand(s); replace w/ result
[=][expect_6][6]
 ^ Assign next 2 sequential operand(s); replace w/ result
[6] expression resolved
Interpreter ret_code = 0

INTERNAL ERROR MESSAGES: Unique messages = 0; Total messages = 0;

USER ERROR MESSAGES: Unique messages = 0; Total messages = 0;

USER WARNING MESSAGES: Unique messages = 0; Total messages = 0;

USER INFO MESSAGES: Unique messages = 0; Total messages = 0;

/* ********** <SHOW VARIABLES & VALUES> ********** */
// ********** <SCOPE LEVEL 0> ********** 
// Scope opened by: INTERNAL_USE_TKN(U)->[__ROOT_SCOPE] on line 0 column 0
eight    = 8;
expect_6 = 6;
five     = 5;
four     = 4;
nine     = 9;
one      = 1;
seven    = 7;
six      = 6;
three    = 3;
two      = 2;
// ********** </SCOPE LEVEL 0> ********** 
/* ********** </SHOW VARIABLES & VALUES> ********** */
/* *************** </INTERPRETER STAGE> *************** */
