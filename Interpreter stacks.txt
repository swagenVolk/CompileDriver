[3] [7] [B+] [2] [B-] [4] [%] [16] [*] [8] [/] 
[10] [2] [B-] [4] [%] [16] [*] [8] [/] 
[8] [4] [%] [16] [*] [8] [/] 
[2] [16] [*] [8] [/] 
[32] [8] [/] 
[4] 


isSuccess = 1; OPR8R = B+; result = BRKN_TKN  _signed = 10; on line 0 column 0
isSuccess = 1; OPR8R = B-; result = BRKN_TKN  _signed = 8; on line 0 column 0
isSuccess = 1; OPR8R = %; result = BRKN_TKN  on line 0 column 0
isSuccess = 1; OPR8R = *; result = BRKN_TKN  on line 0 column 0
isSuccess = 1; OPR8R = /; result = BRKN_TKN  on line 0 column 0




TODO: Going L2R now!


(count == 1 ? desc = "one" : count == 2 ? desc = "two" : count == 3 ? altCount =  5 + 6 * 7 * (8 + 9) : count == 4 ? desc = "four" : desc = "MANY")


L2R 
(1 + 2 * (3 + 4 * (5 + 6 * 7 * (8 + 9))))
[1] [2] [3] [4] [5] [42] [8] [9] [+] [*] [+] [*] [+] [*] [+] 
[1] [2] [3] [4] [5] [42] [17] [*] [+] [*] [+] [*] [+] 
[1] [2] [3] [4] [5] [714] [+] [*] [+] [*] [+] 
[1] [2] [3] [4] [719] [*] [+] [*] [+] 
[1] [2] [3] [2876] [+] [*] [+] 
[1] [2] [2879] [*] [+] 
[1] [5758] [+] 
[5759]



(count == 1 ? "one" : count == 2 ? "two" : count == 3 ? "three" : count == 4 ? "four" : "MANY")
[count] [1] [==] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 

count = 1;
[count] [1] [==] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[1] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
        ^^^^ <- Figure out where path(s) not taken end!
count = 2;        
[count] [1] [==] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[0] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[1] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
        ^^^^^ <- Figure out where path(s) not taken end!

count = 3;        
[count] [1] [==] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[0] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[0] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[1] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
        ^^^^^^^ <- Figure out where path(s) not taken end!
        
count = 4;        
[count] [1] [==] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[0] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[0] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[0] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[count] [4] [==] [?] [four] [:] [MANY] 
[1] [?] [four] [:] [MANY] 
        ^^^^^^ <- Figure out where path(s) not taken end!
        
count = 5;        
[count] [1] [==] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[0] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[0] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[0] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[count] [4] [==] [?] [four] [:] [MANY] 
[0] [?] [four] [:] [MANY] 
                   ^^^^^^


count = 1;
[count] [1] [==] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
[1] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 
        ^^^^ <- Figure out where path(s) not taken end!

[1] [?] [one] [:] [count] [2] [==] [?] [two] [:] [count] [3] [==] [?] [three] [:] [count] [4] [==] [?] [four] [:] [MANY] 

[four] [:] [MANY] 
[three] [:] [count] [4] [==] [?]
[two] [:] [count] [3] [==] [?] 
[1] [?] [one] [:] [count] [2] [==]



 * Example C expression
 * (1 + 2 * (3 + 4 * (5 + 6 * 7 * (8 + 9))))
 * 
 * And how it will get written to interpreted file.
 * NOTE that we'll go R2L through this list until we find an OPR8R followed by the
 * required # of operands; in this case [8] [9] [+]. Note that in the above C expression,
 * 8 + 9 is in the most deeply nested parentheses and therefore has the highest precedence
 * [1]  [2]  [3]  [4]  [5]  [6]  [7]  [*]  [8]  [9]  [+]  [*]  [+]  [*]  [+]  [*]  [+] 
 * [1]  [2]  [3]  [4]  [5]           [42]           [17]  [*]  [+]  [*]  [+]  [*]  [+] 
 * [1]  [2]  [3]  [4]  [5]                              [714]  [+]  [*]  [+]  [*]  [+] 
 * [1]  [2]  [3]  [4]                                        [719]  [*]  [+]  [*]  [+] 
 * [1]  [2]  [3]                                                 [2876]  [+]  [*]  [+] 
 * [1]  [2]                                                           [2879]  [*]  [+] 
 * [1]                                                                     [5758]  [+] 
 *                                                                              [5759]

 * Example nested ternary C expression
 * (count == 1 ? "one" : count == 2 ? "two" : count == 3 ? "three" : count == 4 ? "four" : "MANY")

 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]  [:]  [count]  [1]  [==]  [?] 

 * **************************************************************************************************************************************************************
 * count = 1;
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]  [:]  [count]  [1]  [==]  [?] 
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]  [:]  [1]  [?] 

 * Somehow we've got to skip over all the junk to get to the [one] at the end
 * We're moving BACKWARDS through the list, so L&R for the [:] OPR8R are in reverse order.

 * [one]  [two]  [three]  [four]  [MANY]  
 * [:]  [count]  [4]  [==]  [?]  -> pulls off [four] [MANY] because this branch was never reached
 * [:]  [count]  [3]  [==]  [?]  -> pulls off [three] because the false branch was already pulled off above
 * [:]  [count]  [2]  [==]  [?]  -> pulls off [two] because the false branch was already pulled off above
 * [:]  [1]  [?] -> this is finally resolved as [one]


 * **************************************************************************************************************************************************************
 * count = 2;
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]  [:]  [count]  [1]  [==]  [?] 
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]  [:]  [0]  [?] 
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [1]  [?]

 * [one]  [two]  [three]  [four]  [MANY]  
 * [:]  [count]  [4]  [==]  [?]  -> pulls off [four] [MANY] because this branch was never reached
 * [:]  [count]  [3]  [==]  [?]  -> pulls off [three] because the false branch was already pulled off above
 * [:]  [1]  [?]  -> After previous scopes popped, we grab the 1st available -> [two]
 * 

 * **************************************************************************************************************************************************************
 * count = 3;
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]  [:]  [count]  [1]  [==]  [?] 
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]  [:]  [0]  [?] 
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [0]  [?]
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [1]  [?]  

 * [one]  [two]  [three]  [four]  [MANY]  
 * [:]  [count]  [4]  [==]  [?]  -> pulls off [four] [MANY] because this branch was never reached  
 * [:]  [1]  [?]  -> After previous scopes popped, we grab the 1st available -> [three]  


 * **************************************************************************************************************************************************************
 * count = 4;
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]  [:]  [count]  [1]  [==]  [?] 
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]  [:]  [0]  [?] 
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [0]  [?] 
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [0]  [?]
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [1]  [?]

 * [one]  [two]  [three]  [four]  [MANY]  
 * [:]  [1]  [?] -> There are 2 possibilities for us to grab; Since it's the TRUE path and we're running in REVERSE, pick the 2nd* resolved token [four]
 * 2nd going from R2L, which would in turn be 1st in L2R order for that expression 2-tuple
 * 
 * 
 * **************************************************************************************************************************************************************
 * count = 5;
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]  [:]  [count]  [1]  [==]  [?] 
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [count]  [2]  [==]  [?]  [:]  [0]  [?] 
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]  [:]  [0]  [?] 
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [count]  [3]  [==]  [?]
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]  [:]  [0]  [?]
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [count]  [4]  [==]  [?]
 * [one]  [two]  [three]  [four]  [MANY]  [:]  [0]  [?]
 * 
 * [one]  [two]  [three]  [four]  [MANY]  
 * [:]  [0]  [?] -> There are 2 possibilities for us to grab; Since the FALSE path is valid and we're running in REVERSE, pick the 1st* resolved token [MANY]
 * 1st going from R2L, which would in turn be 2nd in L2R order for that expression 2-tuple





(1 + 2 * (3 + 4 * (5 + 6 * 7 * (count == 1 ? 10 : count == 2 ? 11 : count == 3 ? 12 : count == 4 ? 13 : 33))))

count = 1;
[1] [2] [3] [4] [5] [6] [7] [*] [count] [1] [==] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
[1] [2] [3] [4] [5] [42] [count] [1] [==] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
[1] [2] [3] [4] [5] [42] [1] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 

[*] [+] [*] [+] [*] [+] 
^ OPR8R after single operand indicates a different scope
[13] [:] [33] 
[12] [:] [count] [4] [==] [?] 
[11] [:] [count] [3] [==] [?] 
[10] [:] [count] [2] [==] [?] 
[1] [2] [3] [4] [5] [42] [1] [?]  

[1] [2] [3] [4] [5] [42] [10] [*] [+] [*] [+] [*] [+] 
[1] [2] [3] [4] [5] [420] [+] [*] [+] [*] [+] 
[1] [2] [3] [4] [425] [*] [+] [*] [+] 
[1] [2] [3] [1700] [+] [*] [+] 
[1] [2] [1703] [*] [+] 
[1] [3406] [+] 
[3407]



count = 2;
(1 + 2 * (3 + 4 * (5 + 6 * 7 * (count == 1 ? 10 : count == 2 ? 11 : count == 3 ? 12 : count == 4 ? 13 : 33))))

[1] [2] [3] [4] [5] [6] [7] [*] [count] [1] [==] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
[1] [2] [3] [4] [5] [42] [count] [1] [==] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
[1] [2] [3] [4] [5] [42] [0] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
                          ^ Toss contents up to and including [:]
[1] [2] [3] [4] [5] [42] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
[1] [2] [3] [4] [5] [42] [1] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
                          ^ Take true path, but we need to figure out where the false path ends



[:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
             ^ If this was a BINARY OPR8R, then [count] would be a single term expression

************************************************************************
[:] [count] [3] [==] [?] <- Open a new scope (?)
[12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 

************************************************************************
[:] [count] [3] [==] [?] <- Open a new scope (?)
[12] [:] [count] [4] [==] [?] <- Open a new scope
[13] [:] [33] [*] [+] [*] [+] [*] [+] 
         ^ Single term followed by binary OPR8R

************************************************************************
[:] [count] [3] [==] [?] <- Open a new scope (?)
[12] [:] [count] [4] [==] [?] <- Open a new scope
[13] [:] [33] 
         ^ Single term followed by binary OPR8R. The nested TERNARY chain is now closed.
[*] [+] [*] [+] [*] [+] <- This remainder gets returned         

[:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
^ TERNARY FALSE STACK/STREAM

[1] [2] [3] [4] [5] [42] [11] 

[1] [2] [3] [4] [5] [42] [11] [*] [+] [*] [+] [*] [+]
[1] [2] [3] [4] [5] [462] [+] [*] [+] [*] [+]
[1] [2] [3] [4] [467] [*] [+] [*] [+]
[1] [2] [3] [4] [467] [*] [+] [*] [+]
[1] [2] [3] [1868] [+] [*] [+]
[1] [2] [1871] [*] [+]
[1] [3742] [+]
[3743]


count = 3;
[1] [2] [3] [4] [5] [6] [7] [*] [count] [1] [==] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 

count = 4;
[1] [2] [3] [4] [5] [6] [7] [*] [count] [1] [==] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 

count = 5;
[1] [2] [3] [4] [5] [6] [7] [*] [count] [1] [==] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 










 * (1 + 2 * (3 + 4 * (5 + 6 * 7 * (count == 1 ? 10 : count == 2 ? 11 : count == 3 ? 12 : count == 4 ? 13 : 33))))
 * 
 * count = 1;
 * [1] [2] [3] [4] [5] [6] [7] [*] [count] [1] [==] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
 *                      ^^ 1st ^^^ ^^^ 2nd ^^^^^^^^
 * [1] [2] [3] [4] [5] [42] [1] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
 *                      1st 2nd
 * [1] [2] [3] [4] [5] [42] [1] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
 *                           ^^^1st - TRUE path; leave expression before [:] (e.g. [10]) in the stream and consume the FALSE path (1 complete sub-expression within)
 * [1] [2] [3] [4] [5] [42] [1] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
 *                              numOperands: 1       2   1    1(?) - but need to consume this nested TERNARY - if this was a BINARY OPR8R (UNARY? POSTFIX? PREFIX? STATEMENT_ENDER?)
 *                                                                   then we'd be done with it. Consume everything up to and including the [:] OPR8R, then consume the next expression
 * 
 * [1] [2] [3] [4] [5] [42] [1] [?] [10] [:] [count] [2] [==] [?] [11] [:] [count] [3] [==] [?] [12] [:] [count] [4] [==] [?] [13] [:] [33] [*] [+] [*] [+] [*] [+] 
 *                                                             numOprands: 1       2   1    1(?) ^^^ ^^^  1       2   1   1(?) ^^^ ^^^ 1    ^ Not enough operands for this OPR8R, so
 *                                                                                                                                            we've closed off the nested TERNARYs
 *                                                                                                                                            and need to preserve these OPR8Rs
                                       
                          
