Operators are shown below in precedence order, each contained in []. 
Operators on the same line have the same precedence level.
Operators on lower lines have lower precedence than those on lines above. 
For operators on the same precedence level in a sub-expression, the precedence
between them is resolved in a left-to-right order.

For operators with duplicate source symbols, a "=>" will show the unambiguous internal symbol
Additional operator attribute info contained in ().

Please see example files named illustrate_*.[c|out]. in the ./testCSrcFiles directory.
An illustate_*.c file is a simple C source file and the corresponding illustrate_*.out 
file has illustrative output to show "under the hood" how the compiler and interpreter 
resolve expressions. The unambiguous internal symbol will be used in those output files
and will include more detail on the current operator being executed.

********************* DESCENDING ORDER OPERATOR PRECEDENCE *********************
[++ => 1+ (POSTFIX)][-- => 1- (POSTFIX)]
[++ => +1 (PREFIX)] [-- => -1 (PREFIX)] [+ => +U (UNARY)]   [- => -U (UNARY)]   [!]  [~]  
[*]  [/]  [%]  
[+ => B+ (BINARY)]  [- => B- (BINARY)]  
[<<] [>>] 
[<]  [<=] [>]  [>=] 
[==] [!=] 
[&]  
[^]  
[|]  
[&&] 
[||] 
[?]  
[:]  
[=]  [+=] [-=] [*=] [/=] [%=] [<<=][>>=][&=] [^=] [|=] 
[;]  

********************************************************************************
Operator precedence gives everybody rules on what order to do things in.
Operator precedence example expression
(3 * 4 + 12 / 6)

********************************************************************************
What if we ignored precedence and just went left-to-right?
3 * 4 -> [12]; 12 + 12 -> [24]; 24 / 6 -> [4]
Evaluating to a final result of [4]

********************************************************************************
What if we ignored precedence and just went right-to-left?
6 /12 -> [0.5]; 0.5 + 4 -> [4.5]; 4.5 * 3 -> [13.5]
Evaluating to a final result of [13.5]

********************************************************************************
Referencing the operator precedence above, [*] and [/] are at the same level.
Their relative ordering is now decided on a left-to right basis
The [+] operator has the lowest precedence in this example, and will be executed last
3 * 4 -> [12] gets resolved 1st, and reduces the expression to: 
12 + 12 / 6
12 / 6 -> [2] gets resolved 2nd, and reduces the expression to: 
12 + 2
Evaluating to a final result [14]

Use parentheses in source expressions when you want to force a preferred ordering.
Parentheses can also be used to provide clarity when needed, especially when
bit-wise and bit-shift operators are used.
********************************************************************************
